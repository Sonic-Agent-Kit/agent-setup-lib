import { RabbitMQService } from "./Rabbitmq";
import { TaskRepository } from "./TaskRepository";
import { Config } from "./Config";
export interface AgentTask {
    id: string;
    userId: string;
    agentId: string;
    taskQuery: string;
    taskDescription: string;
    scheduledTime: Date;
    status: "pending" | "queued" | "running" | "completed" | "failed";
    recurrenceInterval?: number;
    recurrenceEndTime?: Date;
}
export declare class AgentTaskScheduler {
    private config;
    private taskRepository;
    private rabbitMQService;
    private checkInterval;
    constructor(config: Config, taskRepository: TaskRepository, rabbitMQService: RabbitMQService);
    stop(): void;
    scheduleTask(agentId: string, userId: string, taskQuery: string, taskDescription: string, scheduledTime: Date, recurrenceInterval?: number, recurrenceEndTime?: Date): Promise<string>;
    private checkDueTasks;
    cancelTask(taskId: string): Promise<boolean>;
}
