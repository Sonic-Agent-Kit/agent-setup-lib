import { HumanMessage, BaseMessage } from "@langchain/core/messages";
import { Runnable } from "@langchain/core/runnables";
import { StructuredToolInterface } from "@langchain/core/tools";
import { MessagesAnnotation } from "@langchain/langgraph";
import { Member } from "./agent.service";
export declare const AgentState: import("@langchain/langgraph").AnnotationRoot<{
    messages: import("@langchain/langgraph").BinaryOperatorAggregate<BaseMessage[], BaseMessage[]>;
    team_members: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
    next: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    instructions: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    stateOption: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
}>;
export declare class AgentSetup {
    state: typeof AgentState.State;
    llm: any;
    constructor(state: typeof AgentState.State, llm: any);
    /**
     * Returns a string that modifies the agent's state based on the conversation history.
     *
     * @param systemPrompt - The system prompt.
     * @param tools - The list of available tools.
     * @param teamMembers - The list of team member names.
     * @returns A string that is the modified state.
     */
    agentStateModifier(systemPrompt: string, tools: StructuredToolInterface[], teamMembers: string[]): (state: typeof MessagesAnnotation.State) => string;
    /**
    * Returns a string that modifies the agent's state based on the conversation history.
    *
    * @param systemPrompt - The system prompt.
    * @param tools - The list of available tools.
    * @returns A string that is the modified state.
    */
    agentStateModifierV2(systemPrompt: string, tools: StructuredToolInterface[]): (state: typeof MessagesAnnotation.State) => string;
    /**
     * Invokes an agent node and returns a new HumanMessage based on the agent's last message.
     *
     * @param params - An object containing the agent (Runnable) and the name.
     * @returns An object with a `messages` property containing the HumanMessage.
     */
    runAgentNode(params: {
        state: any;
        agent: Runnable;
        name: string;
    }): Promise<{
        messages: HumanMessage[];
    }>;
    /**
     * Creates a team supervisor runnable that selects the next role.
     *
     * @param members - The list of team member names and their classification if any.
     * @returns A Promise resolving to a Runnable that selects the next role.
     */
    createTeamSupervisor(members: Member[], system_prompt?: string): Promise<Runnable>;
}
