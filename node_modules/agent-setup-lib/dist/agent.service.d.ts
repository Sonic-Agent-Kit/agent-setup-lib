export interface Member {
    name: string;
    func?: any;
    classification?: Array<string>;
}
export declare class ChainCreator {
    private saver;
    private supervisorAgent;
    private members;
    /**
     * @param saver - The memory saver instance.
     * @param supervisorAgent - The pre-created supervisor agent.
     * @param members - An array of team member objects: { name: string; func: Function }.
     */
    constructor(saver: any, supervisorAgent: any, members: Member[]);
    /**
     * Creates and compiles the final chain.
     * @returns The compiled chain.
     */
    createChain(): import("@langchain/langgraph").CompiledStateGraph<import("@langchain/langgraph").StateType<{
        messages: import("@langchain/langgraph").BinaryOperatorAggregate<import("@langchain/core/messages").BaseMessage[], import("@langchain/core/messages").BaseMessage[]>;
        team_members: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
        next: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
        instructions: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
        stateOption: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    }>, import("@langchain/langgraph").UpdateType<{
        messages: import("@langchain/langgraph").BinaryOperatorAggregate<import("@langchain/core/messages").BaseMessage[], import("@langchain/core/messages").BaseMessage[]>;
        team_members: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
        next: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
        instructions: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
        stateOption: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    }>, "supervisor" | "__start__", {
        messages: import("@langchain/langgraph").BinaryOperatorAggregate<import("@langchain/core/messages").BaseMessage[], import("@langchain/core/messages").BaseMessage[]>;
        team_members: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
        next: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
        instructions: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
        stateOption: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    }, {
        messages: import("@langchain/langgraph").BinaryOperatorAggregate<import("@langchain/core/messages").BaseMessage[], import("@langchain/core/messages").BaseMessage[]>;
        team_members: import("@langchain/langgraph").BinaryOperatorAggregate<string[], string[]>;
        next: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
        instructions: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
        stateOption: import("@langchain/langgraph").BinaryOperatorAggregate<string, string>;
    }, import("@langchain/langgraph").StateDefinition>;
}
