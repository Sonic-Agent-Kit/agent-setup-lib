"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainCreator = void 0;
const langgraph_1 = require("@langchain/langgraph");
const agent_setup_1 = require("./agent.setup"); // Ensure SolanaAgentState is exported from agent.setup
class ChainCreator {
    /**
     * @param saver - The memory saver instance.
     * @param supervisorAgent - The pre-created supervisor agent.
     * @param members - An array of team member objects: { name: string; func: Function }.
     */
    constructor(saver, supervisorAgent, members) {
        this.saver = saver;
        this.supervisorAgent = supervisorAgent;
        this.members = members;
    }
    /**
     * Creates and compiles the final chain.
     * @returns The compiled chain.
     */
    createChain() {
        // Initialize the state graph with the SolanaAgentState.
        const graph = new langgraph_1.StateGraph(agent_setup_1.AgentState).addNode("supervisor", this.supervisorAgent);
        // Add each team member as a node.
        this.members.forEach((member) => {
            graph.addNode(member.name, member.func);
        });
        // Create an edge from each team member to the supervisor.
        this.members.forEach((member) => {
            graph.addEdge(member.name, "supervisor");
        });
        // Map agent names to their respective nodes.
        const nextSteps = Object.fromEntries(this.members.map((member) => [member.name, member.name]));
        // Add conditional edges from the supervisor node.
        graph.addConditionalEdges("supervisor", (state) => state.next, {
            ...nextSteps,
            FINISH: langgraph_1.END,
        });
        // Add an edge from the START node to the supervisor.
        graph.addEdge(langgraph_1.START, "supervisor");
        // Compile the chain using the provided saver as the checkpointer.
        const chain = graph.compile({
            checkpointer: this.saver,
        });
        return chain;
    }
}
exports.ChainCreator = ChainCreator;
