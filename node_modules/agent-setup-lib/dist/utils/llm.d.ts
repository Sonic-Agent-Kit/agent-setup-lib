import { ChatOllama, OllamaEmbeddings } from "@langchain/ollama";
import { ChatOpenAI, OpenAIEmbeddings } from "@langchain/openai";
import { ChatGroq } from "@langchain/groq";
import { ChatAnthropic } from "@langchain/anthropic";
export interface LlmConfig {
    OLLAMA_BASE_URL: string;
    /** Required for OpenAI chat provider */
    OPENAI_CHAT_API_KEY?: string;
    /** Required for OpenAI embeddings provider */
    OPENAI_EMBEDDINGS_API_KEY?: string;
    /** Required for Anthropic chat provider */
    ANTHROPIC_API_KEY?: string;
}
export interface ChatOptions {
    model?: string;
    temperature?: number;
    provider: "ollama" | "openai" | "groq" | "anthropic";
}
export interface EmbeddingsOptions {
    model?: string;
    provider: "ollama" | "openai";
}
export interface ChatLlmInstance {
    name: string;
    instance: ChatOllama | ChatOpenAI | ChatGroq | ChatAnthropic;
}
export interface EmbeddingsInstance {
    name: string;
    instance: OllamaEmbeddings | OpenAIEmbeddings;
}
export declare class Llm {
    private config;
    private chatInstance;
    private chatName;
    private embeddingsInstance;
    private embeddingsName;
    /**
     * Constructs a new Llm instance.
     * @param config - Must include at least the OLLAMA_BASE_URL and, for the respective providers,
     * the required API keys.
     */
    constructor(config: LlmConfig);
    /**
     * Returns a chat LLM instance along with the provider name.
     * Uses a mapping (use-case style) to instantiate the chosen provider.
     *
     * @param options - Options for the chat LLM including the provider, model, and temperature.
     * @returns An object containing the provider name and the chat LLM instance.
     */
    getChatLlm(options: ChatOptions): ChatLlmInstance;
    /**
     * Returns an embeddings instance along with the provider name.
     * Uses a mapping (use-case style) to instantiate the chosen provider.
     *
     * @param options - Options for embeddings including the provider and model.
     * @returns An object containing the provider name and the embeddings instance.
     */
    getEmbeddings(options: EmbeddingsOptions): EmbeddingsInstance;
}
