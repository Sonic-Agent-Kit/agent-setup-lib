import { MongoClient } from "mongodb";
import { MongoDBSaver } from "@langchain/langgraph-checkpoint-mongodb";
import { BaseMessage } from "@langchain/core/messages";
export interface VectorStoreOptions {
    dbName: string;
    collectionName: string;
    indexName: string;
    textKey: string;
    embeddingKey: string;
}
export declare class MongoHandler {
    private embeddings;
    private mongoUri;
    private vectorStoreOptions;
    /**
     * @param embeddings - An embeddings instance (e.g., returned from Llm.getOpenAiEmbeddings).
     * @param mongoUri - The MongoDB connection URI.
     * @param vectorStoreOptions - Options for the vector store.
     */
    constructor(embeddings: any, mongoUri: string, vectorStoreOptions: VectorStoreOptions);
    /**
     * Creates and returns a connected MongoClient.
     * @returns A Promise that resolves to a connected MongoClient.
     */
    initClient(): Promise<MongoClient>;
    /**
     * Initializes and returns a MongoDBSaver instance.
     * @param dbName - The database name for saving checkpoints.
     * @param checkpointCollectionName - The collection name for checkpoints.
     * @returns A Promise that resolves to a MongoDBSaver.
     */
    initSaver(dbName: string, checkpointCollectionName: string): Promise<MongoDBSaver>;
    /**
     * Processes a message by embedding its content and adding it to a MongoDB vector store.
     * Uses the vector store options provided in the constructor.
     * @param message - The message to process.
     * @param userId - The user identifier associated with the message.
     */
    processMessage(message: BaseMessage, userId: string): Promise<void>;
}
