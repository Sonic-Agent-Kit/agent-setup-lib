"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoHandler = void 0;
const mongodb_1 = require("mongodb");
const langgraph_checkpoint_mongodb_1 = require("@langchain/langgraph-checkpoint-mongodb");
const mongodb_2 = require("@langchain/mongodb");
class MongoHandler {
    /**
     * @param embeddings - An embeddings instance (e.g., returned from Llm.getOpenAiEmbeddings).
     * @param mongoUri - The MongoDB connection URI.
     * @param vectorStoreOptions - Options for the vector store.
     */
    constructor(embeddings, mongoUri, vectorStoreOptions) {
        this.embeddings = embeddings;
        this.mongoUri = mongoUri;
        this.vectorStoreOptions = vectorStoreOptions;
    }
    /**
     * Creates and returns a connected MongoClient.
     * @returns A Promise that resolves to a connected MongoClient.
     */
    async initClient() {
        const client = new mongodb_1.MongoClient(this.mongoUri);
        await client.connect();
        return client;
    }
    /**
     * Initializes and returns a MongoDBSaver instance.
     * @param dbName - The database name for saving checkpoints.
     * @param checkpointCollectionName - The collection name for checkpoints.
     * @returns A Promise that resolves to a MongoDBSaver.
     */
    async initSaver(dbName, checkpointCollectionName) {
        const client = await this.initClient();
        return new langgraph_checkpoint_mongodb_1.MongoDBSaver({
            client,
            dbName,
            checkpointCollectionName,
        });
    }
    /**
     * Processes a message by embedding its content and adding it to a MongoDB vector store.
     * Uses the vector store options provided in the constructor.
     * @param message - The message to process.
     * @param userId - The user identifier associated with the message.
     */
    async processMessage(message, userId) {
        const client = await this.initClient();
        const collection = client
            .db(this.vectorStoreOptions.dbName)
            .collection(this.vectorStoreOptions.collectionName);
        const vectorStore = new mongodb_2.MongoDBAtlasVectorSearch(this.embeddings, {
            collection,
            indexName: this.vectorStoreOptions.indexName,
            textKey: this.vectorStoreOptions.textKey,
            embeddingKey: this.vectorStoreOptions.embeddingKey,
        });
        const doc = {
            pageContent: message.content.toString(),
            metadata: { userId, timestamp: new Date() },
        };
        await vectorStore.addDocuments([doc]);
    }
}
exports.MongoHandler = MongoHandler;
