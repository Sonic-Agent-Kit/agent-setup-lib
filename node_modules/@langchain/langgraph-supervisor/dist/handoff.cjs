"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHandoffBackMessages = exports.createHandoffTool = void 0;
const uuid_1 = require("uuid");
const zod_1 = require("zod");
const messages_1 = require("@langchain/core/messages");
const tools_1 = require("@langchain/core/tools");
const langgraph_1 = require("@langchain/langgraph");
const WHITESPACE_RE = /\s+/;
function _normalizeAgentName(agentName) {
    /**
     * Normalize an agent name to be used inside the tool name.
     */
    return agentName.trim().replace(WHITESPACE_RE, "_").toLowerCase();
}
const createHandoffTool = ({ agentName }) => {
    /**
     * Create a tool that can handoff control to the requested agent.
     *
     * @param agentName - The name of the agent to handoff control to, i.e.
     *   the name of the agent node in the multi-agent graph.
     *   Agent names should be simple, clear and unique, preferably in snake_case,
     *   although you are only limited to the names accepted by LangGraph
     *   nodes as well as the tool names accepted by LLM providers
     *   (the tool name will look like this: `transfer_to_<agent_name>`).
     */
    const toolName = `transfer_to_${_normalizeAgentName(agentName)}`;
    const handoffTool = (0, tools_1.tool)(async (_, config) => {
        /**
         * Ask another agent for help.
         */
        const toolMessage = new messages_1.ToolMessage({
            content: `Successfully transferred to ${agentName}`,
            name: toolName,
            tool_call_id: config.toolCall.id,
        });
        // inject the current agent state
        const state = (0, langgraph_1.getCurrentTaskInput)();
        return new langgraph_1.Command({
            goto: agentName,
            graph: langgraph_1.Command.PARENT,
            update: { messages: state.messages.concat(toolMessage) },
        });
    }, {
        name: toolName,
        schema: zod_1.z.object({}),
        description: "Ask another agent for help.",
    });
    return handoffTool;
};
exports.createHandoffTool = createHandoffTool;
function createHandoffBackMessages(agentName, supervisorName) {
    /**
     * Create a pair of (AIMessage, ToolMessage) to add to the message history when returning control to the supervisor.
     */
    const toolCallId = (0, uuid_1.v4)();
    const toolName = `transfer_back_to_${_normalizeAgentName(supervisorName)}`;
    const toolCalls = [{ name: toolName, args: {}, id: toolCallId }];
    return [
        new messages_1.AIMessage({
            content: `Transferring back to ${supervisorName}`,
            tool_calls: toolCalls,
            name: agentName,
        }),
        new messages_1.ToolMessage({
            content: `Successfully transferred back to ${supervisorName}`,
            name: toolName,
            tool_call_id: toolCallId,
        }),
    ];
}
exports.createHandoffBackMessages = createHandoffBackMessages;
//# sourceMappingURL=handoff.js.map